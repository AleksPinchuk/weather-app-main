// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
import dayjs from 'https://unpkg.com/dayjs@1.11.10/esm/index.js';

// –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
const apiCache = new Map();
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞
function createCacheKey(url) {
  return url;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
function isCacheValid(timestamp) {
  return Date.now() - timestamp < CACHE_DURATION;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ –ª–æ–∫–∞—Ü–∏–∏)
export function clearApiCache() {
  apiCache.clear();
  console.log("–ö—ç—à API –æ—á–∏—â–µ–Ω");
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞
export async function getCoordinates(city) {
  try {
    const response = await fetch(
      `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(city)}&count=1`
    );
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();

    if (!data.results || data.results.length === 0) {
      throw new Error("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    return {
      name: data.results[0].name,
      country: data.results[0].country,
      latitude: data.results[0].latitude.toFixed(6),
      longitude: data.results[0].longitude.toFixed(6),
    };
  } catch (error) {
    if (error.name === 'TypeError' && error.message.includes('fetch')) {
      throw new Error('Network error: Unable to connect to geocoding service');
    }
    throw error;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
export async function getCurrentWeather(lat, lon, unitsObj) {
  // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined unitsObj
  if (!unitsObj) {
    throw new Error("unitsObj is required for getCurrentWeather");
  }
  
  const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true&hourly=apparent_temperature,relative_humidity_2m,precipitation&temperature_unit=${unitsObj.temperature}&wind_speed_unit=${unitsObj.wind}&precipitation_unit=${unitsObj.precip}&timezone=auto`;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  const cacheKey = createCacheKey(url);
  const cachedData = apiCache.get(cacheKey);
  
  if (cachedData && isCacheValid(cachedData.timestamp)) {
    console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è current weather");
    return processCurrentWeatherData(cachedData.data);
  }

  const response = await fetch(url);
  
  if (!response.ok) {
    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
  }
  
  const data = await response.json();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
  apiCache.set(cacheKey, {
    data: data,
    timestamp: Date.now()
  });

  return processCurrentWeatherData(data);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
function processCurrentWeatherData(data) {
  if (!data.current_weather) {
    throw new Error("API –Ω–µ –≤–µ—Ä–Ω—É–ª current_weather");
  }

  const current = data.current_weather;
  const currentTime = dayjs(current.time);

  // –ï—Å–ª–∏ hourly –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ current_weather
  if (!data.hourly || !data.hourly.time) {
    console.warn("‚ö†Ô∏è –ù–µ—Ç –±–ª–æ–∫–∞ hourly –≤ –æ—Ç–≤–µ—Ç–µ API:", data);
    return {
      ...current,
      feels_like: current.temperature,
      humidity: null,
      precipitation: null,
    };
  }

  const index = data.hourly.time.findIndex((t) =>
    dayjs(t).isSame(currentTime, "hour")
  );

  // –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
  if (index === -1) {
    console.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞ –≤ hourly:", currentTime);
    return {
      ...current,
      feels_like: current.temperature,
      humidity: null,
      precipitation: null,
    };
  }

  return {
    ...current,
    feels_like: data.hourly.apparent_temperature[index],
    humidity: data.hourly.relative_humidity_2m[index],
    precipitation: data.hourly.precipitation[index],
  };
}

// –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π
export async function getDailyForecast(lat, lon, unitsObj) {
  // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined unitsObj
  if (!unitsObj) {
    throw new Error("unitsObj is required for getDailyForecast");
  }
  
  const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&daily=temperature_2m_max,temperature_2m_min,weathercode&temperature_unit=${unitsObj.temperature}&wind_speed_unit=${unitsObj.wind}&precipitation_unit=${unitsObj.precip}&timezone=auto`;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  const cacheKey = createCacheKey(url);
  const cachedData = apiCache.get(cacheKey);
  
  if (cachedData && isCacheValid(cachedData.timestamp)) {
    console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è daily forecast");
    return cachedData.data.daily;
  }

  const response = await fetch(url);
  
  if (!response.ok) {
    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
  }
  
  const data = await response.json();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
  apiCache.set(cacheKey, {
    data: data,
    timestamp: Date.now()
  });

  return data.daily;
}

// –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑
export async function getHourlyForecast(lat, lon, unitsObj) {
  // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined unitsObj
  if (!unitsObj) {
    throw new Error("unitsObj is required for getHourlyForecast");
  }
  
  const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&hourly=temperature_2m,weathercode&temperature_unit=${unitsObj.temperature}&wind_speed_unit=${unitsObj.wind}&precipitation_unit=${unitsObj.precip}&timezone=auto`;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  const cacheKey = createCacheKey(url);
  const cachedData = apiCache.get(cacheKey);
  
  if (cachedData && isCacheValid(cachedData.timestamp)) {
    console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è hourly forecast");
    return cachedData.data.hourly;
  }

  const response = await fetch(url);
  
  if (!response.ok) {
    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
  }
  
  const data = await response.json();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
  apiCache.set(cacheKey, {
    data: data,
    timestamp: Date.now()
  });

  return data.hourly;
}


// –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã
export function getWeatherImage(weathercode) {
  switch (weathercode) {
    // ‚òÄÔ∏è –Ø—Å–Ω–æ
    case 0:
      return "assets/images/icon-sunny.webp";

    // üå§Ô∏è –û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—Å–≤–µ—Ç–∞–º–∏
    case 1:
    case 2:
      return "assets/images/icon-partly-cloudy.webp";

    // ‚òÅÔ∏è –ü–∞—Å–º—É—Ä–Ω–æ
    case 3:
      return "assets/images/icon-overcast.webp";

    // üå´Ô∏è –¢—É–º–∞–Ω
    case 45:
    case 48:
      return "assets/images/icon-fog.webp";

    // üå¶Ô∏è –ú–æ—Ä–æ—Å—å
    case 51:
    case 53:
    case 55:
    case 56:
    case 57:
      return "assets/images/icon-drizzle.webp";

    // üåßÔ∏è –î–æ–∂–¥—å
    case 61:
    case 63:
    case 65:
    case 66:
    case 67:
    case 80:
    case 81:
    case 82:
      return "assets/images/icon-rain.webp";


    // ‚ùÑÔ∏è –°–Ω–µ–≥
    case 71:
    case 73:
    case 75:
    case 77:
    case 85:
    case 86:
      return "assets/images/icon-snow.webp";

    // ‚õàÔ∏è –ì—Ä–æ–∑–∞
    case 95:
    case 96:
    case 99:
      return "assets/images/icon-storm.webp";

    // üîÑ –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    default:
      return "assets/images/icon-overcast.webp";
  }
}

export function getWeatherGradient(weathercode) {
  switch (weathercode) {
    // ‚òÄÔ∏è –Ø—Å–Ω–æ ‚Äî —Ç—ë–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π ‚Üí –∑–æ–ª–æ—Ç–∏—Å—Ç–æ-–∂—ë–ª—Ç—ã–π
    case 0:
      return "linear-gradient(180deg, #262540 0%, #FFD54F 100%)";

    // üå§Ô∏è –û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—Å–≤–µ—Ç–∞–º–∏ ‚Äî —Ç—ë–º–Ω—ã–π ‚Üí —Ç—ë–ø–ª—ã–π –æ—Ä–∞–Ω–∂–µ–≤–æ-–∂—ë–ª—Ç—ã–π
    case 1:
    case 2:
      return "linear-gradient(180deg, #262540 0%, #FFB74D 100%)";

    // ‚òÅÔ∏è –ü–∞—Å–º—É—Ä–Ω–æ ‚Äî —Ç—ë–º–Ω—ã–π ‚Üí —Å–µ—Ä–æ-–≥–æ–ª—É–±–æ–π
    case 3:
      return "linear-gradient(180deg, #262540 0%, #90A4AE 100%)";

    // üå´Ô∏è –¢—É–º–∞–Ω ‚Äî —Ç—ë–º–Ω—ã–π ‚Üí –º—è–≥–∫–∏–π —Å–µ—Ä–æ-–ª–∏–ª–æ–≤—ã–π
    case 45:
    case 48:
      return "linear-gradient(180deg, #262540 0%, #B0BEC5 100%)";

    // üå¶Ô∏è –ú–æ—Ä–æ—Å—å ‚Äî —Ç—ë–º–Ω—ã–π ‚Üí –≥–æ–ª—É–±–æ–≤–∞—Ç–æ-–±–∏—Ä—é–∑–æ–≤—ã–π
    case 51:
    case 53:
    case 55:
    case 56:
    case 57:
      return "linear-gradient(180deg, #262540 0%, #4FC3F7 100%)";

    // üåßÔ∏è –î–æ–∂–¥—å ‚Äî —Ç—ë–º–Ω—ã–π ‚Üí –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π —Å–∏–Ω–µ-–±–∏—Ä—é–∑–æ–≤—ã–π
    case 61:
    case 63:
    case 65:
    case 66:
    case 67:
    case 80:
    case 81:
    case 82:
      return "linear-gradient(180deg, #262540 0%, #0288D1 100%)";

    // ‚ùÑÔ∏è –°–Ω–µ–≥ ‚Äî —Ç—ë–º–Ω—ã–π ‚Üí —Ö–æ–ª–æ–¥–Ω—ã–π –≥–æ–ª—É–±–æ–≤–∞—Ç–æ-–±–µ–ª—ã–π
    case 71:
    case 73:
    case 75:
    case 77:
    case 85:
    case 86:
      return "linear-gradient(180deg, #262540 0%, #E0F7FA 100%)";

    // ‚õàÔ∏è –ì—Ä–æ–∑–∞ ‚Äî —Ç—ë–º–Ω—ã–π ‚Üí —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ-—Å–∏–Ω–∏–π (—Å –Ω–∞–º—ë–∫–æ–º –Ω–∞ –≤—Å–ø—ã—à–∫—É)
    case 95:
    case 96:
    case 99:
      return "linear-gradient(180deg, #262540 0%, #7E57C2 100%)";

    // üîÑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî —Ç—ë–º–Ω—ã–π ‚Üí –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ-—Å–µ—Ä—ã–π
    default:
      return "linear-gradient(180deg, #262540 0%, #9E9E9E 100%)";
  }
}
