// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
import dayjs from 'https://unpkg.com/dayjs@1.11.10/esm/index.js';

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞
export async function getCoordinates(city) {
  const response = await fetch(
    `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(city)}&count=1`
  );
  const data = await response.json();

  if (!data.results || data.results.length === 0) {
    throw new Error("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω");
  }

  return {
    name: data.results[0].name,
    country: data.results[0].country,
    latitude: data.results[0].latitude,
    longitude: data.results[0].longitude,
  };
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
export async function getCurrentWeather(lat, lon) {
  const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true&hourly=apparent_temperature,relative_humidity_2m,precipitation&timezone=auto`;
  
  const response = await fetch(url);
  const data = await response.json();

  const currentTime = dayjs(data.current_weather.time);

  // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ hourly
  const index = data.hourly.time.findIndex((t) => 
    dayjs(t).isSame(currentTime, "hour")
  );

  return {
    ...data.current_weather,
    feels_like: data.hourly.apparent_temperature[index],
    humidity: data.hourly.relative_humidity_2m[index],
    precipitation: data.hourly.precipitation[index]
  };
}

// –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π
export async function getDailyForecast(lat, lon) {
  const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&daily=temperature_2m_max,temperature_2m_min,weathercode&timezone=auto`;
  
  const response = await fetch(url);
  const data = await response.json();

  return data.daily;
}

// –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑
export async function getHourlyForecast(lat, lon) {
  const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&hourly=temperature_2m,weathercode&timezone=auto`;
  
  const response = await fetch(url);
  const data = await response.json();

  return data.hourly;
}

// –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã
export function getWeatherImage(weathercode) {
  switch (weathercode) {
    // ‚òÄÔ∏è –Ø—Å–Ω–æ
    case 0:
      return "assets/images/icon-sunny.webp";

    // üå§Ô∏è –û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—Å–≤–µ—Ç–∞–º–∏
    case 1:
    case 2:
      return "assets/images/icon-partly-cloudy.webp";

    // ‚òÅÔ∏è –ü–∞—Å–º—É—Ä–Ω–æ
    case 3:
      return "assets/images/icon-overcast.webp";

    // üå´Ô∏è –¢—É–º–∞–Ω
    case 45:
    case 48:
      return "assets/images/icon-fog.webp";

    // üå¶Ô∏è –ú–æ—Ä–æ—Å—å
    case 51:
    case 53:
    case 55:
    case 56:
    case 57:
      return "assets/images/icon-drizzle.webp";

    // üåßÔ∏è –î–æ–∂–¥—å
    case 61:
    case 63:
    case 65:
    case 66:
    case 67:
    case 80:
    case 81:
    case 82:
      return "assets/images/icon-rain.webp";


    // ‚ùÑÔ∏è –°–Ω–µ–≥
    case 71:
    case 73:
    case 75:
    case 77:
    case 85:
    case 86:
      return "assets/images/icon-snow.webp";

    // ‚õàÔ∏è –ì—Ä–æ–∑–∞
    case 95:
    case 96:
    case 99:
      return "assets/images/icon-storm.webp";

    // üîÑ –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    default:
      return "assets/images/icon-overcast.webp";
  }
}
